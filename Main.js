require('dotenv').config({ path: 'database.env' });
const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');
const cors = require('cors');
const app = express();
const PORT = 3000;

app.use(cors());
app.use(bodyParser.json());

const connection = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE
});


// Connect to the database
connection.connect();

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////Home Screen//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Endpoint to get the shiny percentage from nationaldex
app.get('/shiny-percentage', (req, res) => {
  const sql = `
    SELECT (SUM(CASE WHEN shiny = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS shiny_percentage
    FROM nationaldex;
  `;
  connection.query(sql, (err, result) => {
    if (err) throw err;
    res.json({ shiny_percentage: parseFloat(result[0].shiny_percentage) }); // Return as number
  });
});

// Endpoint to get the shiny percentages by generation
app.get('/shiny-percentage-by-gen', (req, res) => {
  const sql = `
    SELECT gen, 
           (SUM(CASE WHEN shiny = 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS shiny_percentage
    FROM nationaldex
    GROUP BY gen
    ORDER BY gen ASC;
  `;
  connection.query(sql, (err, result) => {
    if (err) throw err;

    // Convert shiny_percentage to a float for each result
    const formattedResult = result.map(row => ({
      ...row,
      shiny_percentage: parseFloat(row.shiny_percentage) // Ensure it's a number
    }));

    res.json(formattedResult);
  });
});

// Endpoint to get the 5 latest shinies
app.get('/recent-shiny', (req, res) => {
  const sql = `
    SELECT * FROM shinyowned
    ORDER BY id DESC
    LIMIT 5;
  `;
  connection.query(sql, (err, result) => {
    if (err) throw err;
    res.json(result);
  });
});
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////NationalDex//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Endpoint to get all Pokemon from nationaldex
app.get('/nationaldex', (req, res) => {
  const sql = 'SELECT * FROM nationaldex ORDER BY id ASC';
  connection.query(sql, (err, result) => {
    if (err) throw err;
    res.send(result);
  });
});

// Endpoint to add a Pokémon to shinyowned
app.post('/add-shiny', (req, res) => {
  const { name, dexnumber } = req.body;

  if (!name || !dexnumber) {
    return res.status(400).json({ error: 'Name and dexnumber are required' });
  }

  const query = 'INSERT INTO shinyowned (name, dexnumber) VALUES (?, ?)';
  
  connection.query(query, [name, dexnumber], (error) => {
    if (error) {
      return res.status(500).json({ error: 'Error adding Pokémon to shinyowned' });
    }
    res.status(200).json({ message: 'Pokémon added to shinyowned' });
  });
});
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////Shiny List///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Endpoint to get all shiny Pokémon from the database
app.get('/my-shiny-list', (req, res) => {
  const sql = 'SELECT * FROM shinyowned ORDER BY dexnumber asc'; 
  connection.query(sql, (err, result) => {
    if (err) throw err;
    res.send(result);
  });
});

// Endpoint to delete a Pokémon from shinyowned
app.delete('/delete-shiny/:id', (req, res) => {
  const id = req.params.id;
  const sql = 'DELETE FROM shinyowned WHERE id = ?';

  connection.query(sql, [id], function(err, result) {
    if (err) {
      return res.status(500).json({ error: err.message });
    }
    res.status(200).json({ message: 'Pokemon deleted from shinyowned' });
  });
});
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
